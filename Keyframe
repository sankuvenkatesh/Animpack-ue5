bl_info = {
    "name": "Maya Style Red Keyframe Line",
    "author": "Venkatesh Sanku",
    "version": (1, 1, 0),
    "blender": (4, 4, 0),
    "location": "Timeline > Sidebar > Keyframe Line",
    "description": "Shows a Maya-style straight red line indicator on the timeline for the current frame",
    "category": "Animation",
}

import bpy
import gpu
from gpu_extras.batch import batch_for_shader

handler = None
timer = None

def draw_red_line_callback(context):
    region = context.region
    frame = context.scene.frame_current
    frame_start = context.scene.frame_start
    frame_end = context.scene.frame_end

    width = region.width
    height = region.height

    total_frames = frame_end - frame_start + 1
    if total_frames <= 0:
        return

    pos = (frame - frame_start) / total_frames
    x = pos * width

    coords = [(x, 0), (x, height)]

    shader = gpu.shader.from_builtin('2D_UNIFORM_COLOR')
    batch = batch_for_shader(shader, 'LINES', {"pos": coords})

    shader.bind()
    shader.uniform_float("color", (1.0, 0.0, 0.0, 1.0))
    batch.draw(shader)

def draw_red_line(self, context):
    draw_red_line_callback(context)

def add_handler():
    global handler
    if handler is None:
        for area in bpy.context.screen.areas:
            if area.type == 'TIMELINE':
                for region in area.regions:
                    if region.type == 'WINDOW':
                        handler = region.callback_add(draw_red_line, (bpy.context,), 'POST_PIXEL')
                        print("Red line draw handler added")
                        return True
    return False

def remove_handler():
    global handler
    if handler is not None:
        bpy.types.SpaceTimeline.draw_handler_remove(handler, 'WINDOW')
        handler = None
        print("Red line draw handler removed")

def timer_callback():
    for window in bpy.context.window_manager.windows:
        for area in window.screen.areas:
            if area.type == 'TIMELINE':
                for region in area.regions:
                    if region.type == 'WINDOW':
                        region.tag_redraw()
    return 0.1

class KEYFRAME_LINE_OT_toggle(bpy.types.Operator):
    bl_idname = "animation.toggle_keyframe_line"
    bl_label = "Toggle Red Keyframe Line"
    bl_description = "Toggle Maya-style red keyframe line indicator on the timeline"

    def execute(self, context):
        prefs = context.scene.keyframe_line_settings
        wm = context.window_manager
        global timer

        if prefs.enabled:
            remove_handler()
            if timer is not None:
                wm.event_timer_remove(timer)
                timer = None
            prefs.enabled = False
        else:
            added = add_handler()
            if added:
                timer = wm.event_timer_add(0.1, window=context.window)
                prefs.enabled = True
        return {'FINISHED'}

class KEYFRAME_LINE_Preferences(bpy.types.PropertyGroup):
    enabled: bpy.props.BoolProperty(
        name="Enabled",
        description="Enable or disable Maya-style red keyframe line",
        default=False,
    )

class KEYFRAME_LINE_PT_panel(bpy.types.Panel):
    bl_label = "Maya Style Red Keyframe Line"
    bl_space_type = 'TIMELINE'
    bl_region_type = 'UI'
    bl_category = 'Keyframe Line'

    def draw(self, context):
        layout = self.layout
        settings = context.scene.keyframe_line_settings

        if settings.enabled:
            layout.operator("animation.toggle_keyframe_line", text="Disable Red Line", icon='CHECKBOX_HLT')
        else:
            layout.operator("animation.toggle_keyframe_line", text="Enable Red Line", icon='CHECKBOX_DEHLT')

def register():
    bpy.utils.register_class(KEYFRAME_LINE_OT_toggle)
    bpy.utils.register_class(KEYFRAME_LINE_PT_panel)
    bpy.utils.register_class(KEYFRAME_LINE_Preferences)
    bpy.types.Scene.keyframe_line_settings = bpy.props.PointerProperty(type=KEYFRAME_LINE_Preferences)

def unregister():
    remove_handler()
    bpy.utils.unregister_class(KEYFRAME_LINE_OT_toggle)
    bpy.utils.unregister_class(KEYFRAME_LINE_PT_panel)
    bpy.utils.unregister_class(KEYFRAME_LINE_Preferences)
    del bpy.types.Scene.keyframe_line_settings

if __name__ == "__main__":
    register()
