bl_info = {
    "name": "Timeline Keyframe Line Overlay",
    "description": "Show timeline keyframes as vertical lines instead of diamonds",
    "author": "Animation Technical Artist",
    "version": (1, 0),
    "blender": (3, 0, 0),
    "location": "Timeline > View",
    "category": "Animation",
}

import bpy
import bgl
import gpu
from blender.types import Operator, Panel
from gpu_extras.batch import batch_for_shader

def get_keyframe_frames():
    obj = bpy.context.active_object
    if not obj or not obj.animation_data or not obj.animation_data.action:
        return []
    frames = set()
    action = obj.animation_data.action
    for fcurve in action.fcurves:
        for kp in fcurve.keyframe_points:
            frames.add(int(kp.co.x))
    return list(frames)

def draw_callback_px(self, context):
    area = context.area
    region = context.region
    frames = get_keyframe_frames()
    if not frames: return

    # Timeline frame range and region dims
    start = context.scene.frame_start
    end = context.scene.frame_end
    r_x = region.width
    r_y = region.height

    # Map frames to region x
    for frame in frames:
        frac = (frame - start) / max(end - start, 1)
        x = int(frac * r_x)
        # Draw a red vertical line
        shader = gpu.shader.from_builtin('2D_UNIFORM_COLOR')
        vertices = [(x, 0), (x, r_y)]
        batch = batch_for_shader(shader, 'LINES', {"pos": vertices})
        shader.bind()
        shader.uniform_float("color", (1.0, 0.0, 0.0, 1.0))
        batch.draw(shader)

class KEYFRAMELINE_OT_activate(Operator):
    """Activate keyframe line overlay in Timeline"""
    bl_idname = "timeline.keyframe_line_overlay_activate"
    bl_label = "Keyframe Line Overlay Activate"

    _handle = None

    def execute(self, context):
        if KEYFRAMELINE_OT_activate._handle is None:
            KEYFRAMELINE_OT_activate._handle = bpy.types.SpaceTimeline.draw_handler_add(
                draw_callback_px, (self, context), 'WINDOW', 'POST_PIXEL')
        self.report({'INFO'}, "Keyframe line overlay activated")
        return {'FINISHED'}

class KEYFRAMELINE_OT_deactivate(Operator):
    """Deactivate keyframe line overlay in Timeline"""
    bl_idname = "timeline.keyframe_line_overlay_deactivate"
    bl_label = "Keyframe Line Overlay Deactivate"

    def execute(self, context):
        if KEYFRAMELINE_OT_activate._handle:
            bpy.types.SpaceTimeline.draw_handler_remove(
                KEYFRAMELINE_OT_activate._handle, 'WINDOW')
            KEYFRAMELINE_OT_activate._handle = None
        self.report({'INFO'}, "Keyframe line overlay deactivated")
        return {'FINISHED'}

class KEYFRAMELINE_PT_panel(Panel):
    bl_label = "Keyframe Line Overlay"
    bl_space_type = 'TIMELINE'
    bl_region_type = 'UI'
    bl_category = 'Keyframe Lines'

    def draw(self, context):
        layout = self.layout
        layout.operator(KEYFRAMELINE_OT_activate.bl_idname)
        layout.operator(KEYFRAMELINE_OT_deactivate.bl_idname)

def register():
    bpy.utils.register_class(KEYFRAMELINE_OT_activate)
    bpy.utils.register_class(KEYFRAMELINE_OT_deactivate)
    bpy.utils.register_class(KEYFRAMELINE_PT_panel)

def unregister():
    bpy.utils.unregister_class(KEYFRAMELINE_OT_activate)
    bpy.utils.unregister_class(KEYFRAMELINE_OT_deactivate)
    bpy.utils.unregister_class(KEYFRAMELINE_PT_panel)

if __name__ == "__main__":
    register()
