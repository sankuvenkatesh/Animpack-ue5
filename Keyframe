# -*- coding: utf-8 -*-

bl_info = {
    "name": "Delete Keyframe by Interval",
    "author": "Venkatesh Sanku",
    "version": (1, 0, 6),
    "blender": (2, 80, 0),
    "location": "View3D > Sidebar > Animation",
    "description": "Delete keyframes by interval with types selection, invert selection and preview.",
    "category": "Animation",
}

import bpy
from bpy.props import (
    IntProperty, BoolProperty, PointerProperty
)
from bpy.types import (
    Operator, Panel, PropertyGroup
)


def update_preview(self, context):
    props = context.scene.delete_keyframe_props
    start, end = props.start_frame, props.end_frame
    interval = max(1, props.interval)
    invert = props.invert_selection

    if end < start:
        props.preview_count = 0
        return

    count = 0
    for f in range(start, end + 1):
        is_interval = ((f - start) % (interval + 1)) == 0
        if invert != is_interval:
            count += 1

    props.preview_count = count


class DeleteKeyframeProperties(PropertyGroup):
    start_frame: IntProperty(
        name="Start Frame",
        default=0, min=0,
        update=update_preview
    )
    end_frame: IntProperty(
        name="End Frame",
        default=100, min=0,
        update=update_preview
    )
    interval: IntProperty(
        name="Interval",
        default=1, min=1, max=500,
        update=update_preview
    )
    delete_location: BoolProperty(
        name="Location",
        description="Delete location keyframes",
        default=True,
    )
    delete_rotation: BoolProperty(
        name="Rotation",
        description="Delete rotation keyframes",
        default=True,
    )
    delete_scale: BoolProperty(
        name="Scale",
        description="Delete scale keyframes",
        default=True,
    )
    delete_custom: BoolProperty(
        name="Custom Properties",
        description="Delete custom property keyframes",
        default=True,
    )
    invert_selection: BoolProperty(
        name="Invert Selection",
        description="Delete frames at interval instead of others",
        default=False,
        update=update_preview
    )
    affect_pose_bones: BoolProperty(
        name="Affect Pose Bones",
        default=True,
        description="Delete on selected pose bones"
    )
    only_selected_objects: BoolProperty(
        name="Selected Objects Only",
        default=True,
        description="Operate only on selected objects"
    )
    preview_count: IntProperty(
        name="Frames to delete",
        default=0,
        options={'HIDDEN'}
    )


def delete_on_object_at_frame(obj, frame, props):
    count = 0
    if props.delete_location:
        if obj.keyframe_delete(data_path="location", frame=frame):
            count += 1
    if props.delete_rotation:
        if obj.keyframe_delete(data_path="rotation_euler", frame=frame):
            count += 1
        if obj.keyframe_delete(data_path="rotation_quaternion", frame=frame):
            count += 1
    if props.delete_scale:
        if obj.keyframe_delete(data_path="scale", frame=frame):
            count += 1
    if props.delete_custom:
        ad = obj.animation_data
        if ad and ad.action:
            for fc in list(ad.action.fcurves):
                dp = fc.data_path
                if dp.startswith('["') and dp.endswith('"]'):
                    for kp in list(fc.keyframe_points):
                        if int(round(kp.co[0])) == frame:
                            fc.keyframe_points.remove(kp)
                            count += 1
    return count


def delete_on_pose_bone_at_frame(pbone, frame, props):
    count = 0
    if props.delete_location:
        if pbone.keyframe_delete(data_path="location", frame=frame):
            count += 1
    if props.delete_rotation:
        if pbone.keyframe_delete(data_path="rotation_euler", frame=frame):
            count += 1
        if pbone.keyframe_delete(data_path="rotation_quaternion", frame=frame):
            count += 1
    if props.delete_scale:
        if pbone.keyframe_delete(data_path="scale", frame=frame):
            count += 1
    # No support for custom props on bones
    return count


class DeleteKeyframeOperator(Operator):
    bl_idname = "object.delete_keyframe_by_interval"
    bl_label = "Execute Deletion"
    bl_description = "Delete keyframes by interval"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        props = context.scene.delete_keyframe_props

        if props.end_frame < props.start_frame:
            self.report({'ERROR'}, "End frame must be >= start frame")
            return {'CANCELLED'}

        frames_to_delete = []
        for f in range(props.start_frame, props.end_frame + 1):
            is_interval = ((f - props.start_frame) % (props.interval + 1)) == 0
            if props.invert_selection != is_interval:
                frames_to_delete.append(f)

        targets = context.selected_objects if props.only_selected_objects else context.scene.objects

        if not targets:
            self.report({'WARNING'}, "No objects to process")
            return {'CANCELLED'}

        total_deleted = 0
        for f in frames_to_delete:
            for obj in targets:
                total_deleted += delete_on_object_at_frame(obj, f, props)
                if props.affect_pose_bones and obj.type == 'ARMATURE' and obj.mode == 'POSE':
                    for pbone in context.selected_pose_bones:
                        total_deleted += delete_on_pose_bone_at_frame(pbone, f, props)

        props.preview_count = len(frames_to_delete)
        bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)
        self.report({'INFO'}, f"Deleted {len(frames_to_delete)} frames, {total_deleted} keyframe edits")
        return {'FINISHED'}


class DeleteKeyframePanel(Panel):
    bl_label = "Delete Keyframe By Interval"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'Animation'
    bl_options = {'DEFAULT_CLOSED'}

    def draw(self, context):
        layout = self.layout
        props = context.scene.delete_keyframe_props

        col = layout.column(align=True)
        col.label(text="Frame Range")
        row = col.row(align=True)
        row.prop(props, "start_frame")
        row.prop(props, "end_frame")

        col.prop(props, "interval")

        col.separator()
        col.label(text="Delete Types")

        col.prop(props, "delete_location")
        col.prop(props, "delete_rotation")
        col.prop(props, "delete_scale")
        col.prop(props, "delete_custom")

        col.separator()
        row = col.row(align=True)
        row.prop(props, "invert_selection")
        row.prop(props, "affect_pose_bones")

        col.prop(props, "only_selected_objects")

        col.separator()
        col.label(text=f"Preview frames to delete: {props.preview_count}")

        col.operator("object.delete_keyframe_by_interval", icon='TRASH')


classes = (
    DeleteKeyframeProperties,
    DeleteKeyframeOperator,
    DeleteKeyframePanel,
)


def register():
    for cls in classes:
        bpy.utils.register_class(cls)
    bpy.types.Scene.delete_keyframe_props = PointerProperty(type=DeleteKeyframeProperties)


def unregister():
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)
    del bpy.types.Scene.delete_keyframe_props


if __name__ == "__main__":
    register()
