import bpy
import gpu
from gpu_extras.batch import batch_for_shader

class KeyframeRedLinesOperator(bpy.types.Operator):
    bl_idname = "timeline.keyframe_red_lines_gpu"
    bl_label = "Toggle Red Keyframe Lines (GPU)"

    _handle = None

    @staticmethod
    def draw_callback(self, context):
        area = next((a for a in context.window.screen.areas if a.type in {'DOPESHEET_EDITOR', 'TIMELINE'}), None)
        if not area:
            return
        region = next((r for r in area.regions if r.type == 'WINDOW'), None)
        if not region:
            return
        width, height = region.width, region.height

        space = area.spaces.active
        start_frame, end_frame = space.frame_start, space.frame_end

        obj = context.active_object

        frames = set()
        if obj and obj.animation_data and obj.animation_data.action:
            for fcurve in obj.animation_data.action.fcurves:
                for kp in fcurve.keyframe_points:
                    frames.add(kp.co.x)

        if end_frame == start_frame:
            return

        coords = []
        for frame in frames:
            if start_frame <= frame <= end_frame:
                x = int((frame - start_frame) / (end_frame - start_frame) * width)
                coords.append((x, 0))
                coords.append((x, height))

        if not coords:
            return

        shader = gpu.shader.from_builtin('2D_UNIFORM_COLOR')
        batch = batch_for_shader(shader, 'LINES', {"pos": coords})

        gpu.state.blend_set('ALPHA')
        shader.bind()
        shader.uniform_float("color", (1.0, 0.0, 0.0, 1.0))  # Red color
        gpu.state.line_width_set(2.0)

        batch.draw(shader)

        gpu.state.line_width_set(1.0)
        gpu.state.blend_set('NONE')

    def execute(self, context):
        if KeyframeRedLinesOperator._handle is None:
            KeyframeRedLinesOperator._handle = bpy.types.SpaceDopeSheetEditor.draw_handler_add(
                self.draw_callback, (self, context), 'WINDOW', 'POST_PIXEL')
            self.report({'INFO'}, "Red keyframe lines enabled")
        else:
            bpy.types.SpaceDopeSheetEditor.draw_handler_remove(KeyframeRedLinesOperator._handle, 'WINDOW')
            KeyframeRedLinesOperator._handle = None
            self.report({'INFO'}, "Red keyframe lines disabled")

        # Redraw dopesheet/timeline areas
        for window in context.window_manager.windows:
            for area in window.screen.areas:
                if area.type in {'DOPESHEET_EDITOR', 'TIMELINE'}:
                    area.tag_redraw()

        return {'FINISHED'}


class KeyframeRedLinesPanel(bpy.types.Panel):
    bl_label = "Maya Style Red Keyframe Lines"
    bl_space_type = 'TIMELINE'
    bl_region_type = 'UI'
    bl_category = "Keyframes"

    def draw(self, context):
        layout = self.layout
        layout.operator(KeyframeRedLinesOperator.bl_idname, text="Toggle Red Keyframe Lines (GPU)")


def register():
    bpy.utils.register_class(KeyframeRedLinesOperator)
    bpy.utils.register_class(KeyframeRedLinesPanel)


def unregister():
    if KeyframeRedLinesOperator._handle is not None:
        bpy.types.SpaceDopeSheetEditor.draw_handler_remove(KeyframeRedLinesOperator._handle, 'WINDOW')
        KeyframeRedLinesOperator._handle = None
    bpy.utils.unregister_class(KeyframeRedLinesOperator)
    bpy.utils.unregister_class(KeyframeRedLinesPanel)


if __name__ == "__main__":
    register()
