import bpy

def main():
    selected_objects = bpy.context.selected_objects

    # Separate armatures and mesh objects
    armatures = [obj for obj in selected_objects if obj.type == 'ARMATURE']
    meshes = [obj for obj in selected_objects if obj.type == 'MESH']

    if len(armatures) < 2:
        print("Please select at least 2 armatures.")
        return

    # Apply transforms on all objects to fix scale/position issues
    for obj in meshes + armatures:
        bpy.context.view_layer.objects.active = obj
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)

    # Get and set active the first armature safely
    first_armature = armatures[0]
    first_armature_name = first_armature.name

    bpy.ops.object.select_all(action='DESELECT')
    first_armature.select_set(True)
    bpy.context.view_layer.objects.active = first_armature

    action_names = {}

    # Duplicate current actions and rename for each armature safely
    for armature in armatures:
        anim_data = armature.animation_data
        if anim_data:
            current_action = anim_data.action
            if current_action:
                new_action_name = f"{armature.name}_combined_action"
                new_action = current_action.copy()
                new_action.name = new_action_name
                anim_data.action = new_action
                action_names[armature.name] = new_action_name

    # Rename bones to include armature prefix for uniqueness
    for armature in armatures:
        for bone in armature.data.bones:
            bone.name = f"{armature.name}_{bone.name}"

    # Clear parents and remove armature modifiers from meshes
    for mesh in meshes:
        mesh.parent = None
        mods_to_remove = [mod for mod in mesh.modifiers if mod.type == 'ARMATURE']
        for mod in mods_to_remove:
            mesh.modifiers.remove(mod)

    # Join all meshes into one object
    if meshes:
        bpy.ops.object.select_all(action='DESELECT')
        for mesh in meshes:
            mesh.select_set(True)
        bpy.context.view_layer.objects.active = meshes[0]
        bpy.ops.object.join()
        joined_mesh = bpy.context.object
        joined_mesh.name = f"{first_armature_name}_joined_objects"
    else:
        joined_mesh = None

    # Select armatures and join them
    if len(armatures) > 1:
        bpy.ops.object.select_all(action='DESELECT')
        for armature in armatures:
            armature.select_set(True)
        bpy.context.view_layer.objects.active = first_armature
        bpy.ops.object.join()
        first_armature.name = f"{first_armature_name}_joined_armatures"

    # Create a new combined action
    combined_action = bpy.data.actions.new(name="joined_combined_action")

    # Copy fcurves from each duplicated action into combined action
    for armature_name, action_name in action_names.items():
        action = bpy.data.actions.get(action_name)
        if not action:
            continue
        for fcurve in action.fcurves:
            group_name = fcurve.group.name if fcurve.group else ""
            new_fcurve = combined_action.fcurves.new(
                data_path=fcurve.data_path,
                index=fcurve.array_index,
                action_group=group_name
            )
            for keyframe in fcurve.keyframe_points:
                new_fcurve.keyframe_points.insert(
                    frame=keyframe.co.x,
                    value=keyframe.co.y,
                    options={'FAST'}
                )

    # Assign the combined action to the joined armature
    first_armature.animation_data.action = combined_action

    # Parent joined mesh to joined armature with armature parent type
    if joined_mesh:
        joined_mesh.parent = first_armature
        joined_mesh.parent_type = 'ARMATURE'

    # Show combined action in Dopesheet editor if open
    for area in bpy.context.screen.areas:
        if area.type == 'DOPESHEET_EDITOR':
            area.spaces.active.action = combined_action

    print("Operation completed successfully.")

if __name__ == "__main__":
    main()
