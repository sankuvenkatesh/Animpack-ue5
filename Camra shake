import bpy

def apply_transform(obj):
    bpy.context.view_layer.objects.active = obj
    obj.select_set(True)
    bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)
    obj.select_set(False)

def reset_bone_matrices(armature):
    bpy.context.view_layer.objects.active = armature
    armature.select_set(True)
    bpy.ops.object.mode_set(mode='EDIT')
    for bone in armature.data.edit_bones:
        bone.matrix = bone.matrix.normalized()
    bpy.ops.object.mode_set(mode='OBJECT')
    armature.select_set(False)

def main():
    selected_objects = bpy.context.selected_objects

    armatures = [obj for obj in selected_objects if obj.type == 'ARMATURE']
    meshes = [obj for obj in selected_objects if obj.type == 'MESH']

    if len(armatures) < 2:
        print("Select at least two armatures.")
        return

    # Apply transforms on all to fix scale/position issues
    for obj in meshes + armatures:
        apply_transform(obj)

    # Set first armature as active and select it
    first_armature = armatures[0]
    first_armature_name = first_armature.name
    bpy.ops.object.select_all(action='DESELECT')
    first_armature.select_set(True)
    bpy.context.view_layer.objects.active = first_armature

    # Duplicate and rename actions for each armature
    action_names = {}
    for armature in armatures:
        if armature.animation_data and armature.animation_data.action:
            current_action = armature.animation_data.action
            new_action_name = f"{armature.name}_combined_action"
            new_action = current_action.copy()
            new_action.name = new_action_name
            armature.animation_data.action = new_action
            action_names[armature.name] = new_action_name

    # Rename bones with armature prefix to avoid conflicts
    bpy.ops.object.mode_set(mode='EDIT')
    for armature in armatures:
        bpy.context.view_layer.objects.active = armature
        bpy.ops.object.mode_set(mode='EDIT')
        for bone in armature.data.edit_bones:
            bone.name = f"{armature.name}_{bone.name}"
        bpy.ops.object.mode_set(mode='OBJECT')

    # Clear parents and remove armature modifiers from meshes
    for mesh in meshes:
        mesh.parent = None
        for mod in [m for m in mesh.modifiers if m.type == 'ARMATURE']:
            mesh.modifiers.remove(mod)

    # Join meshes
    if meshes:
        bpy.ops.object.select_all(action='DESELECT')
        for mesh in meshes:
            mesh.select_set(True)
        bpy.context.view_layer.objects.active = meshes[0]
        bpy.ops.object.join()
        joined_mesh = bpy.context.object
        joined_mesh.name = f"{first_armature_name}_joined_mesh"
        # Apply transforms again to joined mesh
        apply_transform(joined_mesh)
    else:
        joined_mesh = None

    # Join armatures
    if len(armatures) > 1:
        bpy.ops.object.select_all(action='DESELECT')
        for armature in armatures:
            armature.select_set(True)
        bpy.context.view_layer.objects.active = first_armature
        bpy.ops.object.join()
        first_armature.name = f"{first_armature_name}_joined_armature"
        # Reset bone matrices to preserve correct orientation
        reset_bone_matrices(first_armature)

    # Combine actions
    combined_action = bpy.data.actions.new(name="combined_action")
    for arm_name, act_name in action_names.items():
        action = bpy.data.actions.get(act_name)
        if not action:
            continue
        for fcurve in action.fcurves:
            group_name = fcurve.group.name if fcurve.group else ""
            new_fcurve = combined_action.fcurves.new(data_path=fcurve.data_path,
                                                     index=fcurve.array_index,
                                                     action_group=group_name)
            for kf in fcurve.keyframe_points:
                new_fcurve.keyframe_points.insert(kf.co.x, kf.co.y, options={'FAST'})

    first_armature.animation_data.action = combined_action

    # Parent joined mesh to armature
    if joined_mesh:
        joined_mesh.parent = first_armature
        joined_mesh.parent_type = 'ARMATURE'
        joined_mesh.matrix_parent_inverse.identity()
        apply_transform(joined_mesh)

    # Clear pose transforms to avoid double transforms
    bpy.context.view_layer.objects.active = first_armature
    bpy.ops.object.mode_set(mode='POSE')
    bpy.ops.pose.transforms_clear()
    bpy.ops.object.mode_set(mode='OBJECT')

    print("Join operation completed with robust fixes.")

if __name__ == "__main__":
    main()
