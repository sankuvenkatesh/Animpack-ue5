import bpy

def main():
    selected_objects = bpy.context.selected_objects

    # Separate armatures and mesh objects
    armatures = [obj for obj in selected_objects if obj.type == 'ARMATURE']
    meshes = [obj for obj in selected_objects if obj.type == 'MESH']

    if len(armatures) < 2:
        print("Please select at least 2 armatures.")
        return

    # --- FIX: Apply transforms to meshes and armatures before joining ---
    for mesh in meshes:
        bpy.context.view_layer.objects.active = mesh
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)
    for armature in armatures:
        bpy.context.view_layer.objects.active = armature
        bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)

    # Get the first armature
    first_armature = armatures
    first_armature_name = first_armature.name
    action_names = {}

    # Duplicate current actions and rename them for each armature
    for armature in armatures:
        if armature.animation_data and armature.animation_data.action:
            current_action = armature.animation_data.action
            new_action_name = f"{armature.name}_combined_action"
            new_action = current_action.copy()
            new_action.name = new_action_name
            armature.animation_data.action = new_action
            action_names[armature.name] = new_action_name

    # Rename bones to include armature prefix
    for armature in armatures:
        for bone in armature.data.bones:
            new_name = f"{armature.name}_{bone.name}"
            bone.name = new_name

    # Clear parent and delete armature modifier from meshes
    for mesh in meshes:
        mesh.parent = None
        # Remove armature modifiers
        modifiers_to_remove = [mod for mod in mesh.modifiers if mod.type == 'ARMATURE']
        for modifier in modifiers_to_remove:
            mesh.modifiers.remove(modifier)

    # Join all meshes into one
    if meshes:
        bpy.ops.object.select_all(action='DESELECT')
        for mesh in meshes:
            mesh.select_set(True)
        bpy.context.view_layer.objects.active = meshes
        bpy.ops.object.join()
        joined_mesh = bpy.context.object
        joined_mesh.name = f"{first_armature_name}_joined_objects"
    else:
        joined_mesh = None

    # Select all armatures and set the first armature as active
    if len(armatures) > 1:
        bpy.ops.object.select_all(action='DESELECT')
        for armature in armatures:
            armature.select_set(True)
        bpy.context.view_layer.objects.active = first_armature

        # Simulate pressing Ctrl+J to join armatures
        bpy.ops.object.join()
        first_armature.name = f"{first_armature_name}_joined_armatures"

    # --- FIX: Restore bone roll/pose if changes are detected (optional) ---
    # You may insert custom post-join edit bone code here if bone rolls change abnormally

    # Combine all actions into a new action
    combined_action = bpy.data.actions.new(name="joined_combined_action")

    for armature_name, action_name in action_names.items():
        action = bpy.data.actions.get(action_name)
        if action:
            for fcurve in action.fcurves:
                group_name = fcurve.group.name if fcurve.group else ""
                new_fcurve = combined_action.fcurves.new(
                    data_path=fcurve.data_path, index=fcurve.array_index, action_group=group_name)
                for keyframe in fcurve.keyframe_points:
                    new_fcurve.keyframe_points.insert(
                        frame=keyframe.co.x, value=keyframe.co.y, options={'FAST'})

    # Assign the new combined action to the joined armature
    first_armature.animation_data.action = combined_action

    # Parent the joined object to the new armature
    if joined_mesh:
        joined_mesh.parent = first_armature
        joined_mesh.parent_type = 'ARMATURE'

    # Ensure the new action "joined_combined_action" is displayed
    for area in bpy.context.screen.areas:
        if area.type == 'DOPESHEET_EDITOR':
            area.spaces.active.action = combined_action

    print("Operation completed successfully.")

if __name__ == "__main__":
    main()
