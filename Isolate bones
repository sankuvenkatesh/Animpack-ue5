import bpy

# Addon information
bl_info = {
    "name": "Bone Isolation Tools",
    "author": "Your Name",
    "version": (1, 0),
    "blender": (4, 0, 0),
    "location": "3D View > Sidebar > Animation Tab",
    "description": "Hides/shows bones based on selection.",
    "warning": "",
    "doc_url": "",
    "category": "Animation",
}

# Operator to isolate selected bones
class VIEW3D_OT_IsolateBones(bpy.types.Operator):
    bl_idname = "armature.isolate_bones"
    bl_label = "Isolate Selected Bones"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        if bpy.context.active_object and bpy.context.active_object.type == 'ARMATURE':
            armature_obj = bpy.context.active_object
            
            # Ensure we are in Pose Mode to access pose bones
            if bpy.context.mode != 'POSE':
                bpy.ops.object.mode_set(mode='POSE')

            selected_bones = bpy.context.selected_pose_bones
            
            # Hide unselected bones
            for bone in armature_obj.pose.bones:
                if bone not in selected_bones:
                    bone.hide = True
                else:
                    bone.hide = False  # Make sure selected bones are visible

            if not selected_bones: # If nothing is selected, show all bones
                for bone in armature_obj.pose.bones:
                    bone.hide = False

            return {'FINISHED'}
        else:
            self.report({'WARNING'}, "Please select an armature object to isolate bones.")
            return {'CANCELLED'}

# Operator to show all bones
class VIEW3D_OT_ShowAllBones(bpy.types.Operator):
    bl_idname = "armature.show_all_bones"
    bl_label = "Show All Bones"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        if bpy.context.active_object and bpy.context.active_object.type == 'ARMATURE':
            armature_obj = bpy.context.active_object
            
            # Ensure we are in Pose Mode to access pose bones
            if bpy.context.mode != 'POSE':
                bpy.ops.object.mode_set(mode='POSE')
            
            for bone in armature_obj.pose.bones:
                bone.hide = False

            return {'FINISHED'}
        else:
            self.report({'WARNING'}, "Please select an armature object to show all bones.")
            return {'CANCELLED'}

# Panel for the addon
class VIEW3D_PT_BoneIsolationPanel(bpy.types.Panel):
    bl_label = "Bone Isolation Tools"
    bl_idname = "VIEW3D_PT_bone_isolation_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "Animation"

    def draw(self, context):
        layout = self.layout
        
        # Add buttons to the panel
        row = layout.row()
        row.operator("armature.isolate_bones")
        row = layout.row()
        row.operator("armature.show_all_bones")

# Registration and unregistration functions
classes = (
    VIEW3D_OT_IsolateBones,
    VIEW3D_OT_ShowAllBones,
    VIEW3D_PT_BoneIsolationPanel
)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)

def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)

# Execute on script run for testing
if __name__ == "__main__":
    register()
