bl_info = {
    "name": "Gizmo Size Adjuster",
    "author": "Venkatesh sanku",
    "version": (1, 1),
    "blender": (2, 83, 0),
    "location": "View3D > Sidebar > Gizmo Size",
    "description": "Increase or decrease the size of viewport gizmos via panel or +/- keys.",
    "category": "3D View",
}

import bpy

def change_gizmo_size(delta):
    prefs = bpy.context.preferences
    view = prefs.view
    new_size = max(20, min(200, view.gizmo_size + delta))
    view.gizmo_size = new_size

class GIZMO_OT_increase_size(bpy.types.Operator):
    """Increase Gizmo Size"""
    bl_idname = "gizmo.increase_size"
    bl_label = "Increase Gizmo Size"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        change_gizmo_size(10)
        return {'FINISHED'}

class GIZMO_OT_decrease_size(bpy.types.Operator):
    """Decrease Gizmo Size"""
    bl_idname = "gizmo.decrease_size"
    bl_label = "Decrease Gizmo Size"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        change_gizmo_size(-10)
        return {'FINISHED'}

class GIZMO_PT_size_panel(bpy.types.Panel):
    bl_label = "Gizmo Size"
    bl_idname = "GIZMO_PT_size_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "Gizmo Size"

    def draw(self, context):
        layout = self.layout
        prefs = bpy.context.preferences.view
        layout.label(text=f"Current gizmo size: {prefs.gizmo_size}")
        row = layout.row()
        row.operator("gizmo.increase_size", text="Increase (+)")
        row.operator("gizmo.decrease_size", text="Decrease (-)")

addon_keymaps = []

def register():
    bpy.utils.register_class(GIZMO_OT_increase_size)
    bpy.utils.register_class(GIZMO_OT_decrease_size)
    bpy.utils.register_class(GIZMO_PT_size_panel)

    wm = bpy.context.window_manager
    kc = wm.keyconfigs.addon
    if kc:
        km = kc.keymaps.new(name='3D View', space_type='VIEW_3D')
        # NUMPAD_PLUS for increase, NUMPAD_MINUS for decrease
        kmi = km.keymap_items.new(GIZMO_OT_increase_size.bl_idname, 'NUMPAD_PLUS', 'PRESS')
        addon_keymaps.append((km, kmi))
        kmi = km.keymap_items.new(GIZMO_OT_decrease_size.bl_idname, 'NUMPAD_MINUS', 'PRESS')
        addon_keymaps.append((km, kmi))

def unregister():
    for km, kmi in addon_keymaps:
        km.keymap_items.remove(kmi)
    addon_keymaps.clear()
    bpy.utils.unregister_class(GIZMO_OT_increase_size)
    bpy.utils.unregister_class(GIZMO_OT_decrease_size)
    bpy.utils.unregister_class(GIZMO_PT_size_panel)

if __name__ == "__main__":
    register()
