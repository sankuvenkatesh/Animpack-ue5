import bpy
import math

def smooth_fcurve(fcurve, iterations, strength, smoothness, preserve_ends=True):
    """
    Smooth the given F-Curve by iteratively averaging keyframe points values.

    Parameters:
    - fcurve: The F-Curve to smooth.
    - iterations: How many times smoothing is applied (more = smoother).
    - strength: Intensity of smoothing (0..1), non-linearly mapped.
    - smoothness: Controls falloff sensitivity around each keyframe (0..1).
    - preserve_ends: Whether to keep first/last keyframes untouched.
    """

    keyframes = fcurve.keyframe_points
    n = len(keyframes)
    if n < 3:
        return  # Need at least 3 points to smooth meaningfully

    # Extract Y-values of keyframes
    values = [kp.co[1] for kp in keyframes]

    # Nonlinear smoothing factors for better user control
    strength_factor = strength ** 3
    smoothness_factor = smoothness ** 2

    for _ in range(iterations):
        new_values = values[:]
        for i in range(1, n - 1):
            if preserve_ends and (i == 0 or i == n - 1):
                continue

            left = values[i - 1]
            center = values[i]
            right = values[i + 1]

            # Calculate weighted average with smoothness acting as a falloff factor
            weighted_average = (left + center + right) / 3

            # Interpolate between original and average by strength adjusted by smoothness proximity
            # Smoothness modulates sensitivity around center value (can be enhanced further)
            weight = strength_factor * (1.0 - smoothness_factor)
            new_values[i] = center * (1 - weight) + weighted_average * weight

        values = new_values

    # Update fcurve keyframe values after smoothing
    for i, kp in enumerate(keyframes):
        kp.co[1] = values[i]

    fcurve.update()  # Refresh the curve data


class CurveSmoothOperator(bpy.types.Operator):
    """Smooth Selected F-Curves in Graph Editor"""
    bl_idname = "graph.smooth_fcurves"
    bl_label = "Smooth F-Curves"
    bl_options = {'REGISTER', 'UNDO'}

    iterations: bpy.props.IntProperty(name="Iterations", default=5, min=1, max=50)
    strength: bpy.props.FloatProperty(name="Strength", default=0.5, min=0.0, max=1.0, description="Smoothing intensity")
    smoothness: bpy.props.FloatProperty(name="Smoothness", default=0.5, min=0.0, max=1.0,
                                        description="Sensitivity falloff of smoothing")
    preserve_ends: bpy.props.BoolProperty(name="Preserve Ends", default=True,
                                          description="Prevent smoothing of first and last keyframes")

    def execute(self, context):
        # Get selected editable fcurves in the current Graph Editor area
        fcurves = context.selected_editable_fcurves
        if not fcurves:
            self.report({'WARNING'}, "No editable F-Curves selected")
            return {'CANCELLED'}

        # Apply smoothing to each selected F-Curve
        for fcurve in fcurves:
            smooth_fcurve(fcurve, self.iterations, self.strength, self.smoothness, self.preserve_ends)

        self.report({'INFO'}, f"Smoothed {len(fcurves)} F-Curve(s)")
        return {'FINISHED'}


class CurveSmoothPanel(bpy.types.Panel):
    """Panel in the Graph Editor for Curve Smoothing"""
    bl_label = "Curve Smooth Filter"
    bl_space_type = 'GRAPH_EDITOR'
    bl_region_type = 'UI'
    bl_category = "Smooth Tools"

    def draw(self, context):
        layout = self.layout

        # Add descriptive labels
        layout.label(text="Adjust smoothing parameters and apply:")

        # Create operator with adjustable properties
        op = layout.operator("graph.smooth_fcurves", text="Apply Smooth")

        # Show sliders for iterations, strength, smoothness
        layout.prop(op, "iterations")
        layout.prop(op, "strength")
        layout.prop(op, "smoothness")
        layout.prop(op, "preserve_ends")


def register():
    bpy.utils.register_class(CurveSmoothOperator)
    bpy.utils.register_class(CurveSmoothPanel)


def unregister():
    bpy.utils.unregister_class(CurveSmoothOperator)
    bpy.utils.unregister_class(CurveSmoothPanel)


if __name__ == "__main__":
    register()
