import bpy
import random
import fnmatch
import webbrowser

# Opens intro video in default browser
def hIntro(self, context):
    webbrowser.open("https://vimeo.com/286860063")

# Opens tutorial video in default browser
def hTutorial(self, context):
    webbrowser.open("https://vimeo.com/287771379")

# Clean up existing overlap objects by name matching
def CleanUpProc():
    patterns = [
        "*_OverlapJoint*", "*_overlapOffsetLocator*", "overlapResultLocatorOut*",
        "TEMP_Offset_locator*", "*overlapOffsetIKLocator*",
        "OverlapperSet", "OverlapperWorkSet"
    ]
    objs_to_delete = []
    for obj in bpy.data.objects:
        for pat in patterns:
            if fnmatch.fnmatch(obj.name, pat):
                objs_to_delete.append(obj)
                break
    bpy.ops.object.select_all(action='DESELECT')
    for o in objs_to_delete:
        o.select_set(True)
    if objs_to_delete:
        bpy.ops.object.delete()

class OVERLAPPER_OT_RunOverlapper(bpy.types.Operator):
    bl_idname = "overlapper.run"
    bl_label = "Run Overlapper"
    bl_description = "Bake overlapping animation with softness and wind effect"

    softness: bpy.props.FloatProperty(name="Softness", default=3.0, min=0.0, max=50.0)
    global_scale: bpy.props.FloatProperty(name="Scale", default=1.0, min=0.0)
    wind: bpy.props.BoolProperty(name="Wind", default=False)
    wind_scale: bpy.props.FloatProperty(name="Wind Scale", default=1.0, min=0.0)
    wind_speed: bpy.props.FloatProperty(name="Wind Speed", default=1.0, min=0.0)
    first_ctrl: bpy.props.BoolProperty(name="Don't use first control", default=False)
    cycle: bpy.props.BoolProperty(name="Cycle Animation", default=False)

    def execute(self, context):
        sel = context.selected_objects
        if len(sel) < 2:
            self.report({'WARNING'}, "Select at least 2 objects")
            return {'CANCELLED'}

        CleanUpProc()

        col_name = "OverlapperSet"
        # Remove previous overlapper collection if exists
        if col_name in bpy.data.collections:
            overlapper_col = bpy.data.collections[col_name]
            for obj in list(overlapper_col.objects):
                bpy.data.objects.remove(obj, do_unlink=True)
            bpy.data.collections.remove(overlapper_col)

        # Create new collection for overlapper objects
        overlapper_col = bpy.data.collections.new(col_name)
        context.scene.collection.children.link(overlapper_col)

        # Create overlap locator and joint empties, parent joint to locator
        for i, obj in enumerate(sel):
            if self.first_ctrl and i == 0:
                continue
            pos = obj.location.copy()

            loc_name = f"{obj.name}_overlapOffsetLocator"
            loc = bpy.data.objects.new(loc_name, None)
            loc.empty_display_type = 'PLAIN_AXES'
            loc.location = pos
            overlapper_col.objects.link(loc)

            joint_name = f"{obj.name}_OverlapJoint"
            joint = bpy.data.objects.new(joint_name, None)
            joint.empty_display_type = 'SPHERE'
            joint.empty_display_size = 0.5
            joint.location = pos
            overlapper_col.objects.link(joint)

            joint.parent = loc

        self.bake_overlap(sel)

        if self.cycle:
            self.set_cycle_animation(sel)

        self.report({'INFO'}, "Overlapper process completed.")
        return {'FINISHED'}

    def bake_overlap(self, sel):
        scene = bpy.context.scene
        min_frame = int(scene.frame_start)
        max_frame = int(scene.frame_end)
        softness = self.softness
        global_scale = self.global_scale
        wind = self.wind
        wind_scale = self.wind_scale
        wind_speed = self.wind_speed

        for obj in sel:
            orig_x = obj.location.x

            # Ensure animation data and action exist
            if not obj.animation_data:
                obj.animation_data_create()
            if not obj.animation_data.action:
                obj.animation_data.action = bpy.data.actions.new(name=f"{obj.name}_OverlapAction")

            action = obj.animation_data.action

            # Clear existing fcurve keyframes for location x
            for fc in [fc for fc in action.fcurves if fc.data_path == "location" and fc.array_index == 0]:
                fc.keyframe_points.clear()

            # Bake keyframes with softness offset and wind variance
            for frame in range(min_frame, max_frame + 1):
                scene.frame_set(frame)
                base_val = obj.location.x

                wind_offset = 0
                if wind:
                    wind_offset = random.uniform(-1, 1) * wind_scale * wind_speed

                new_val = base_val + softness * global_scale + wind_offset
                bake_frame = frame + softness
                if bake_frame > max_frame:
                    bake_frame = max_frame

                obj.location.x = new_val
                obj.keyframe_insert(data_path="location", frame=bake_frame, index=0)

            # Restore original location at current frame
            scene.frame_set(scene.frame_current)
            obj.location.x = orig_x

    def set_cycle_animation(self, sel):
        for obj in sel:
            if obj.animation_data and obj.animation_data.action:
                for fc in obj.animation_data.action.fcurves:
                    fc.extrapolation = 'Cyclic'

class OVERLAPPER_PT_Panel(bpy.types.Panel):
    bl_idname = "OVERLAPPER_PT_panel"
    bl_label = "Overlapper Tool"
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = "Overlapper"

    def draw(self, context):
        layout = self.layout
        scn = context.scene

        layout.prop(scn, "overlapper_softness")
        layout.prop(scn, "overlapper_global_scale")
        layout.prop(scn, "overlapper_wind")
        if scn.overlapper_wind:
            layout.prop(scn, "overlapper_wind_scale")
            layout.prop(scn, "overlapper_wind_speed")
        layout.prop(scn, "overlapper_first_ctrl")
        layout.prop(scn, "overlapper_cycle")

        layout.operator("overlapper.run", text="Overlap")

        layout.separator()
        row = layout.row(align=True)
        row.operator("overlapper.intro", text="Intro Video")
        row.operator("overlapper.tutorial", text="Tutorial Video")

class OVERLAPPER_OT_Intro(bpy.types.Operator):
    bl_idname = "overlapper.intro"
    bl_label = "Open Intro Video"

    def execute(self, context):
        hIntro(self, context)
        return {'FINISHED'}

class OVERLAPPER_OT_Tutorial(bpy.types.Operator):
    bl_idname = "overlapper.tutorial"
    bl_label = "Open Tutorial Video"

    def execute(self, context):
        hTutorial(self, context)
        return {'FINISHED'}

classes = (
    OVERLAPPER_OT_RunOverlapper,
    OVERLAPPER_PT_Panel,
    OVERLAPPER_OT_Intro,
    OVERLAPPER_OT_Tutorial,
)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)

    bpy.types.Scene.overlapper_softness = bpy.props.FloatProperty(name="Softness", default=3.0, min=0.0, max=50.0)
    bpy.types.Scene.overlapper_global_scale = bpy.props.FloatProperty(name="Scale", default=1.0, min=0.0)
    bpy.types.Scene.overlapper_wind = bpy.props.BoolProperty(name="Wind", default=False)
    bpy.types.Scene.overlapper_wind_scale = bpy.props.FloatProperty(name="Wind Scale", default=1.0, min=0.0)
    bpy.types.Scene.overlapper_wind_speed = bpy.props.FloatProperty(name="Wind Speed", default=1.0, min=0.0)
    bpy.types.Scene.overlapper_first_ctrl = bpy.props.BoolProperty(name="Don't use first control", default=False)
    bpy.types.Scene.overlapper_cycle = bpy.props.BoolProperty(name="Cycle Animation", default=False)

def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)

    del bpy.types.Scene.overlapper_softness
    del bpy.types.Scene.overlapper_global_scale
    del bpy.types.Scene.overlapper_wind
    del bpy.types.Scene.overlapper_wind_scale
    del bpy.types.Scene.overlapper_wind_speed
    del bpy.types.Scene.overlapper_first_ctrl
    del bpy.types.Scene.overlapper_cycle

if __name__ == "__main__":
    register()
