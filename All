bl_info = {
    "name": "Combined Animation & Gizmo Tools",
    "author": "Venkatesh sanku",
    "version": (1, 3, 0),
    "blender": (4, 3, 0),
    "description": (
        "Adds Action list and Undo/Redo buttons to timeline/dopesheet/graph editor headers, "
        "Paste Connect operator to animation right-click menus, "
        "and Gizmo Size Adjuster panel with +/- key shortcuts."
    ),
    "category": "Animation / 3D View",
}

import bpy

# --- Timeline Action List ---

regions = {'TIMELINE', 'DOPESHEET', 'FCURVES'}

def add_actionlist(self, context):
    obj = context.active_object
    sd = context.space_data
    if obj and sd.mode in regions:
        anim_data = obj.animation_data
        if anim_data:
            self.layout.template_ID(anim_data, "action", new=NEW_ACTION.bl_idname)

class NEW_ACTION(bpy.types.Operator):
    bl_idname = "timelineaction.newaction"
    bl_label = "New Action"
    bl_description = "New Action"
    bl_options = {"REGISTER", "UNDO"}

    @classmethod
    def poll(cls, context):
        return context.active_object is not None

    def execute(self, context):
        new_action = bpy.data.actions.new(name="Action")
        obj = context.active_object
        if obj:
            if not obj.animation_data:
                obj.animation_data_create()
            obj.animation_data.action = new_action
            return {'FINISHED'}
        return {'CANCELLED'}

# --- Paste Connect ---

def add_pasteconnect(self, context):
    layout = self.layout
    row = layout.row()
    row.operator(PASTE_CONNECT.bl_idname, icon="PASTEDOWN")

def valid_check():
    obj = bpy.context.active_object
    if not obj:
        return False
    anim_data = obj.animation_data
    if not anim_data:
        return False
    action = anim_data.action
    if not action:
        return False
    fcurves = action.fcurves
    if not fcurves:
        return False
    return fcurves

class PASTE_CONNECT(bpy.types.Operator):
    bl_idname = "pasteconnect.pasteconnect"
    bl_label = "Paste Connect"
    bl_description = "Paste Connect"
    bl_options = {"REGISTER", "UNDO"}

    @classmethod
    def poll(cls, context):
        return context.active_object is not None

    def execute(self, context):
        if (3, 6, 0) > bpy.app.version:
            fcurves = valid_check()
            if not fcurves:
                self.report({'WARNING'}, "No valid F-curves found")
                return {'CANCELLED'}
            frame_current = bpy.context.scene.frame_current
            neighbours = []
            for curve in fcurves:
                val = curve.evaluate(frame_current)
                neighbours.append(val)

            bpy.ops.graph.paste(offset='START', merge='OVER_RANGE', flipped=False)

            for i, curve in enumerate(fcurves):
                neighbour = neighbours[i]
                first_key = None
                for key in curve.keyframe_points:
                    if key.select_control_point:
                        if not first_key:
                            first_key = key.co_ui.y
                        key.co_ui.y = neighbour
                    else:
                        key.co_ui.y = neighbour + key.co_ui.y - first_key
        else:
            bpy.ops.graph.paste(offset='START', value_offset='CURRENT_FRAME', merge='OVER_RANGE', flipped=False)

        return {'FINISHED'}

# --- Undo/Redo Operators for Headers ---

class HEADER_OP_UNDO(bpy.types.Operator):
    bl_idname = "wm.header_undo"
    bl_label = "Undo"
    bl_description = "Undo last action"

    def execute(self, context):
        bpy.ops.ed.undo()
        return {'FINISHED'}

class HEADER_OP_REDO(bpy.types.Operator):
    bl_idname = "wm.header_redo"
    bl_label = "Redo"
    bl_description = "Redo last undone action"

    def execute(self, context):
        bpy.ops.ed.redo()
        return {'FINISHED'}

def add_undo_redo_buttons(self, context):
    layout = self.layout
    layout.separator()
    layout.operator(HEADER_OP_UNDO.bl_idname, text="", icon='LOOP_BACK')
    layout.operator(HEADER_OP_REDO.bl_idname, text="", icon='LOOP_FORWARDS')

# --- Gizmo Size Adjuster ---

def change_gizmo_size(delta):
    prefs = bpy.context.preferences
    view = prefs.view
    new_size = max(20, min(200, view.gizmo_size + delta))
    view.gizmo_size = new_size

class GIZMO_OT_increase_size(bpy.types.Operator):
    """Increase Gizmo Size"""
    bl_idname = "gizmo.increase_size"
    bl_label = "Increase Gizmo Size"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        change_gizmo_size(10)
        return {'FINISHED'}

class GIZMO_OT_decrease_size(bpy.types.Operator):
    """Decrease Gizmo Size"""
    bl_idname = "gizmo.decrease_size"
    bl_label = "Decrease Gizmo Size"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        change_gizmo_size(-10)
        return {'FINISHED'}

class GIZMO_PT_size_panel(bpy.types.Panel):
    bl_label = "Gizmo Size"
    bl_idname = "GIZMO_PT_size_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = "Gizmo Size"

    def draw(self, context):
        layout = self.layout
        prefs = bpy.context.preferences.view
        layout.label(text=f"Current gizmo size: {prefs.gizmo_size}")
        row = layout.row()
        row.operator("gizmo.increase_size", text="Increase (+)")
        row.operator("gizmo.decrease_size", text="Decrease (-)")

# --- Registration ---

addon_keymaps = []

classes = (
    NEW_ACTION,
    PASTE_CONNECT,
    HEADER_OP_UNDO,
    HEADER_OP_REDO,
    GIZMO_OT_increase_size,
    GIZMO_OT_decrease_size,
    GIZMO_PT_size_panel,
)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)

    bpy.types.DOPESHEET_HT_header.append(add_actionlist)
    bpy.types.GRAPH_HT_header.append(add_actionlist)

    bpy.types.DOPESHEET_HT_header.append(add_undo_redo_buttons)
    bpy.types.GRAPH_HT_header.append(add_undo_redo_buttons)
    bpy.types.TIMELINE_HT_header.append(add_undo_redo_buttons)

    bpy.types.GRAPH_MT_context_menu.prepend(add_pasteconnect)
    bpy.types.DOPESHEET_MT_context_menu.prepend(add_pasteconnect)

    # Keymaps for Gizmo Size Adjuster
    wm = bpy.context.window_manager
    kc = wm.keyconfigs.addon
    if kc:
        km = kc.keymaps.new(name='3D View', space_type='VIEW_3D')
        kmi = km.keymap_items.new(GIZMO_OT_increase_size.bl_idname, 'NUMPAD_PLUS', 'PRESS')
        addon_keymaps.append((km, kmi))
        kmi = km.keymap_items.new(GIZMO_OT_decrease_size.bl_idname, 'NUMPAD_MINUS', 'PRESS')
        addon_keymaps.append((km, kmi))

    print("✅ Combined Animation & Gizmo Tools registered")

def unregister():
    # Remove keymaps for Gizmo Size Adjuster
    for km, kmi in addon_keymaps:
        km.keymap_items.remove(kmi)
    addon_keymaps.clear()

    bpy.types.DOPESHEET_HT_header.remove(add_actionlist)
    bpy.types.GRAPH_HT_header.remove(add_actionlist)

    bpy.types.DOPESHEET_HT_header.remove(add_undo_redo_buttons)
    bpy.types.GRAPH_HT_header.remove(add_undo_redo_buttons)
    bpy.types.TIMELINE_HT_header.remove(add_undo_redo_buttons)

    bpy.types.GRAPH_MT_context_menu.remove(add_pasteconnect)
    bpy.types.DOPESHEET_MT_context_menu.remove(add_pasteconnect)

    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)

    print("❌ Combined Animation & Gizmo Tools unregistered")

if __name__ == "__main__":
    register()
