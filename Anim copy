bl_info = {
    "name": "Copy & Mirror Pose",
    "author": "Venkatesh sanku, UI improvements by AI",
    "version": (1, 2),
    "blender": (2, 80, 0),
    "location": "View3D > Sidebar > Venky Anim Toolz",
    "description": "Copy, mirror, and reset pose for armature objects with improved UI",
    "category": "Animation"
}

import bpy

def copy_pose(context):
    bpy.ops.pose.copy()

def paste_pose(context):
    bpy.ops.pose.paste()

def paste_mirror_pose(context):
    bpy.ops.pose.paste(flipped=True)

def reset_pose(context):
    ob = context.active_object
    if ob and ob.type == 'ARMATURE' and ob.mode == 'POSE':
        for bone in ob.pose.bones:
            bone.location = (0.0, 0.0, 0.0)
            bone.rotation_quaternion = (1.0, 0.0, 0.0, 0.0)
            bone.rotation_axis_angle = (0.0, 0.0, 1.0, 0.0)
            bone.rotation_euler = (0.0, 0.0, 0.0)
            bone.scale = (1.0, 1.0, 1.0)
    else:
        return {'CANCELLED'}
    return {'FINISHED'}

class ANIM_OT_CopyPose(bpy.types.Operator):
    bl_idname = "anim.copy_pose_custom"
    bl_label = "Copy Pose"
    bl_description = "Copy selected bones' pose"
    def execute(self, context):
        copy_pose(context)
        self.report({'INFO'}, "Copied Pose")
        return {'FINISHED'}

class ANIM_OT_PastePose(bpy.types.Operator):
    bl_idname = "anim.paste_pose_custom"
    bl_label = "Paste Pose"
    bl_description = "Paste pose to selected bones"
    def execute(self, context):
        paste_pose(context)
        self.report({'INFO'}, "Pasted Pose")
        return {'FINISHED'}

class ANIM_OT_PasteMirrorPose(bpy.types.Operator):
    bl_idname = "anim.paste_mirror_pose_custom"
    bl_label = "Mirror Pose"
    bl_description = "Paste mirrored pose to selected bones"
    def execute(self, context):
        paste_mirror_pose(context)
        self.report({'INFO'}, "Mirrored (Flipped) Pose")
        return {'FINISHED'}

class ANIM_OT_ResetPose(bpy.types.Operator):
    bl_idname = "anim.reset_pose_custom"
    bl_label = "Reset Pose"
    bl_description = "Reset all pose bones to rest pose"
    def execute(self, context):
        reset_pose(context)
        self.report({'INFO'}, "Bones Reset to Rest Pose")
        return {'FINISHED'}

class ANIM_PT_ToolsPanel(bpy.types.Panel):
    bl_label = "Copy & Mirror Pose"
    bl_idname = "ANIM_PT_tools_panel"
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = "Venky Anim Toolz"

    @classmethod
    def poll(cls, context):
        ob = context.active_object
        return ob is not None and ob.type == 'ARMATURE' and context.mode == 'POSE'

    def draw(self, context):
        layout = self.layout
        col = layout.column(align=True)
        row = col.row(align=True)
        row.operator("anim.copy_pose_custom", text="Copy", icon='COPYDOWN')
        row.operator("anim.paste_pose_custom", text="Paste", icon='PASTEDOWN')
        row = col.row(align=True)
        row.operator("anim.paste_mirror_pose_custom", text="Mirror", icon='ARROW_LEFTRIGHT')
        row.operator("anim.reset_pose_custom", text="Reset", icon='LOOP_BACK')

classes = (
    ANIM_OT_CopyPose,
    ANIM_OT_PastePose,
    ANIM_OT_PasteMirrorPose,
    ANIM_OT_ResetPose,
    ANIM_PT_ToolsPanel,
)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)

def unregister():
    for cls in classes:
        bpy.utils.unregister_class(cls)

if __name__ == "__main__":
    register()
