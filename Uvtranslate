bl_info = {
    "name": "UV Translator",
    "author": "Your Name",
    "version": (1, 0, 0),
    "blender": (3, 0, 0),  # Adjust for your Blender version
    "location": "UV Editor > Tools Tab",
    "description": "Translates selected UVs in the UV Editor",
    "category": "UV",
}

import bpy

# --- 1. Custom Operator for UV Translation ---
class UV_OT_TranslateSelected(bpy.types.Operator):
    bl_idname = "uv.translate_selected"
    bl_label = "Translate Selected UVs"
    bl_options = {'REGISTER', 'UNDO'}

    # Define properties to control translation amounts
    translate_x: bpy.props.FloatProperty(
        name="Translate U",
        description="Amount to translate UVs along the U (X) axis",
        default=0.1,
        step=0.01, # Smaller step size for finer control
        precision=3 # Display up to 3 decimal places
    )
    translate_y: bpy.props.FloatProperty(
        name="Translate V",
        description="Amount to translate UVs along the V (Y) axis",
        default=0.2,
        step=0.01,
        precision=3
    )

    @classmethod
    def poll(cls, context):
        # Only enable the operator if an object is active and is a mesh
        return (context.active_object is not None and
                context.active_object.type == 'MESH')

    def execute(self, context):
        obj = context.active_object

        # Store original mode and area type for restoration
        original_mode = obj.mode
        original_area_type = context.area.type

        try:
            # Go to Edit Mode to access mesh elements
            bpy.ops.object.mode_set(mode='EDIT')
            
            # Ensure the UV Editor context
            context.area.type = 'IMAGE_EDITOR' # or 'UV' for older Blenders

            # Select all UVs (you could add more sophisticated selection options here)
            bpy.ops.uv.select_all(action='SELECT') 

            # Translate the selected UVs based on panel inputs
            bpy.ops.transform.translate(value=(self.translate_x, self.translate_y, 0.0))

            return {'FINISHED'}

        finally:
            # Restore original mode and area type
            bpy.ops.object.mode_set(mode=original_mode)
            context.area.type = original_area_type

# --- 2. Custom Panel in the UV Editor ---
class UV_PT_TranslatorPanel(bpy.types.Panel):
    bl_label = "UV Translator"
    bl_idname = "UV_PT_translator_panel"
    bl_space_type = 'IMAGE_EDITOR' # Place the panel in the UV Editor
    bl_region_type = 'UI' # Place it in the sidebar
    bl_category = "Tools" # Name of the tab it appears under

    @classmethod
    def poll(cls, context):
        # Only show the panel when in UV editor and editing a mesh object
        return (context.area.type == 'IMAGE_EDITOR' and
                context.active_object is not None and
                context.active_object.type == 'MESH')

    def draw(self, context):
        layout = self.layout

        # Add properties for UV translation
        col = layout.column(align=True)
        col.prop(context.scene, "uv_translate_x")
        col.prop(context.scene, "uv_translate_y")

        # Add a button to execute the operator
        row = layout.row()
        row.operator(UV_OT_TranslateSelected.bl_idname, text="Translate UVs")


# --- 3. Scene Properties to Store Translation Values ---
class UVTranslatorProperties(bpy.types.PropertyGroup):
    uv_translate_x: bpy.props.FloatProperty(
        name="Translate U",
        description="Amount to translate UVs along the U (X) axis",
        default=0.1,
        step=0.01,
        precision=3
    )
    uv_translate_y: bpy.props.FloatProperty(
        name="Translate V",
        description="Amount to translate UVs along the V (Y) axis",
        default=0.2,
        step=0.01,
        precision=3
    )


# --- 4. Registration and Unregistration Functions ---
classes = (
    UV_OT_TranslateSelected,
    UV_PT_TranslatorPanel,
    UVTranslatorProperties, # Register the property group
)

def register():
    for cls in classes:
        bpy.utils.register_class(cls)
    
    # Register scene properties
    bpy.types.Scene.uv_translate_x = bpy.props.PointerProperty(type=UVTranslatorProperties).uv_translate_x
    bpy.types.Scene.uv_translate_y = bpy.props.PointerProperty(type=UVTranslatorProperties).uv_translate_y
    bpy.types.Scene.uv_translator_props = bpy.props.PointerProperty(type=UVTranslatorProperties)


def unregister():
    for cls in reversed(classes):
        bpy.utils.unregister_class(cls)

    # Unregister scene properties
    del bpy.types.Scene.uv_translate_x
    del bpy.types.Scene.uv_translate_y
    del bpy.types.Scene.uv_translator_props


if __name__ == "__main__":
    register()

